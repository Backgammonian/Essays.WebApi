// <auto-generated />
using Essays.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Essays.WebApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230131144611_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Essays.WebApi.Models.Author", b =>
                {
                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Essays.WebApi.Models.CountriesOfAuthors", b =>
                {
                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<string>("CountryAbbreviation")
                        .HasColumnType("text");

                    b.HasKey("AuthorId", "CountryAbbreviation");

                    b.HasIndex("CountryAbbreviation");

                    b.ToTable("CountriesOfAuthors");
                });

            modelBuilder.Entity("Essays.WebApi.Models.Country", b =>
                {
                    b.Property<string>("CountryAbbreviation")
                        .HasColumnType("text");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CountryAbbreviation");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Essays.WebApi.Models.Essay", b =>
                {
                    b.Property<string>("EssayId")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EssayId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Essays");
                });

            modelBuilder.Entity("Essays.WebApi.Models.EssaysAboutSubjects", b =>
                {
                    b.Property<string>("EssayId")
                        .HasColumnType("text");

                    b.Property<string>("SubjectId")
                        .HasColumnType("text");

                    b.HasKey("EssayId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("EssaysAboutSubjects");
                });

            modelBuilder.Entity("Essays.WebApi.Models.Subject", b =>
                {
                    b.Property<string>("SubjectId")
                        .HasColumnType("text");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SubjectId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Essays.WebApi.Models.SubjectCategory", b =>
                {
                    b.Property<string>("SubjectCategoryId")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SubjectCategoryId");

                    b.ToTable("SubjectCategories");
                });

            modelBuilder.Entity("Essays.WebApi.Models.CountriesOfAuthors", b =>
                {
                    b.HasOne("Essays.WebApi.Models.Author", "Author")
                        .WithMany("CountriesOfAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Essays.WebApi.Models.Country", "Country")
                        .WithMany("CountriesOfAuthors")
                        .HasForeignKey("CountryAbbreviation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Essays.WebApi.Models.Essay", b =>
                {
                    b.HasOne("Essays.WebApi.Models.Author", "Author")
                        .WithMany("Essays")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Essays.WebApi.Models.EssaysAboutSubjects", b =>
                {
                    b.HasOne("Essays.WebApi.Models.Essay", "Essay")
                        .WithMany("EssaysAboutSubjects")
                        .HasForeignKey("EssayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Essays.WebApi.Models.Subject", "Subject")
                        .WithMany("EssaysAboutSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Essay");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Essays.WebApi.Models.Subject", b =>
                {
                    b.HasOne("Essays.WebApi.Models.SubjectCategory", "Category")
                        .WithMany("Subjects")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Essays.WebApi.Models.Author", b =>
                {
                    b.Navigation("CountriesOfAuthors");

                    b.Navigation("Essays");
                });

            modelBuilder.Entity("Essays.WebApi.Models.Country", b =>
                {
                    b.Navigation("CountriesOfAuthors");
                });

            modelBuilder.Entity("Essays.WebApi.Models.Essay", b =>
                {
                    b.Navigation("EssaysAboutSubjects");
                });

            modelBuilder.Entity("Essays.WebApi.Models.Subject", b =>
                {
                    b.Navigation("EssaysAboutSubjects");
                });

            modelBuilder.Entity("Essays.WebApi.Models.SubjectCategory", b =>
                {
                    b.Navigation("Subjects");
                });
#pragma warning restore 612, 618
        }
    }
}
